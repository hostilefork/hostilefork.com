Draem/Comment [
    slug: %major-rebol-language-quirks
    author: "Hostile Fork"
    date: 17-Sep-2008/13:20
    old-url: http://hostilefork.com/2008/09/10/major-rebol-language-quirks/#comment-674
]

[{Hi Kaj,
I knew that there was a special relationship between MS and Sun in the Java case.  But I'm not a legal expert, so I do not know precisely what you can and can't do when it comes to implementing someone's language down to the letter.  Bear in mind that people have filed lawsuits on things like "similar look and feel".
Also, it's important to remember that companies can be sold, and their new owners can have different ideas.  Imagine&#8211;for instance&#8211;RT falling into the hands of Software Conglomerate.  This conglomerate immediately sends a letter from a lawyer demanding the code that analyzes for the "Rebol []" header in source files be changed to say "ORCA []".
That's on day 1.  Who knows what would be on day 2?  Technicalities preoccupy people who haven't gotten a solid commitment that it's NOT going to happen.
<i>why shouldn’t I extend a bit of trust to other people as well; particularly someone who has been a public figure for almost a quarter century, who has contributed greatly to computer science, craft and society, who has helped me in my life and career through those products, and who is even occasionally helping me personally in business matters?</i>
Do not get me wrong, Carl seems like a great guy.  If you have a specific quote or article about his disposition toward open source implementations of Rebol, then that's exactly the kind of thing I'm looking for.  My disclaimers are not etched in stone here (nor is the rest of the article).  I'm just trying to oust the correct information, as Google didn't reveal it to me.
I'm a reasonably trusting individual, but I've learned it is best to get things in writing--even when dealing with people you know to be good.  Until you've done that, everyone might not be on the same page (remember the  "when you ass-u-me..." joke).  We all have different ideas about what "good" or "evil" are, and even if we agree in 99% of cases the 1% might be the most relevant bit at some point in time.
So getting a clear statement of DOs and DONTs up front would be good.
<i>I also don’t see why an open-source Rebol project would be condemned to be run by "a skeletal crew".</i>
Not meaning to condemn anyone's project!  It's clear ORCA represents a lot of work and I was glad to be shown it.  But do note that the main trunk of Python was updated less than two hours ago (as of when I started writing this comment):
<a href="http://svn.python.org/view/python/trunk/" rel="nofollow" target="_blank" class="liexternal">http://svn.python.org/view/python/trunk/</a>
Ruby Core, also 2 hours ago:
<a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/" rel="nofollow" target="_blank" class="liexternal">http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/</a>
If I'm reading correctly, the last updates to ORCA were 10 months ago:
<a href="http://trac.geekisp.com/orca/browser/trunk/orca" rel="nofollow" target="_blank" class="liexternal">http://trac.geekisp.com/orca/browser/trunk/orca</a>
That's just a data point.  I poked through the code a bit and had some opinions on how I would do it differently.  I'd use as many well-vetted cross-platform C++ libraries as I could.  And using the boost file path library is a perfect example of what I would do instead of trying to rewrite the forward/backslash logic, etc.
If you disagree with that then you would probably disagree with other ways I would do it.  But these are my opinions, and we must not mistake disagreements for misconceptions!  On the subject of engineering craft, especially hand-optimized C vs C++...this article by Bjarne Stroustrup is food for thought:
<a href="http://www.research.att.com/~bs/new_learning.pdf" rel="nofollow" class="lipdf">http://www.research.att.com/~bs/new_learning.pdf</a> 
Bjarne's samples are pretty much what I would have given.  There are just too many opportunities for bugs when writing old-style C.  Even if someone is a maverick and can strcpy with the best of them, you won't find many people at that level to collaborate with.  The code falls down at inconvenient times, and has vulnerabilities to hacking.
<i>I don’t think it’s reasonable to ask a company to issue a statement with the goal of making it easier for others to compete with them, without getting anything in return.</i>
Rebol is competing for mindshare among programmers.  Right now only a small fringe "gets" Rebol or cares to try to.  You may know Carl and RT staff personally, but others aren't in that situation.  They want reassurance and fallbacks, and the point I'm trying to make is that those things aren't currently available.  If they were, it could change some attitudes.
A viable and active open source version would be a great thing for RT, because commercial enterprises that wanted the "optimized" version *would* pay for it.  There'd be a lot more code out there produced by academics and free software hackers for them to be running.  In the meantime, you have evangelists flocking to other languages, making them more accessible... volunteering to design pretty websites...
<a href="http://tryruby.hobix.com/" rel="nofollow" target="_blank" class="liexternal">http://tryruby.hobix.com/</a>
That could have been Rebol catching the world by storm!  My hypothesis is that Rebol has failed to do this for reasons that are not at all based on a lack of technical merit... and I'd like to help hammer a few of them out if I can...}]